(()=>{var d,e,o,a;"object"!=typeof Breinify||Breinify.plugins._isAdded("pickUp")||(d=Breinify.UTL._jquery(),e=Breinify.plugins._overload(),o=Breinify.UTL.constants.errors.prefix.validation,a=Breinify.UTL.constants.errors.prefix.api,Breinify.plugins._add("pickUp",{addOrder:function(){var l=this;e.overload({"String,Object,Function":function(e,i,n){l._addOrder({},{},[e],i,n)},"Array,Object,Function":function(e,i,n){l._addOrder({},{},e,i,n)},"String,Object,Object,Function":function(e,i,n,t){l._addOrder(n,{},[e],i,t)},"Array,Object,Object,Function":function(e,i,n,t){l._addOrder(n,{},e,i,t)},"String,Object,Object,Object,Function":function(e,i,n,t,r){l._addOrder(t,i,[e],n,r)},"Array,Object,Object,Object,Function":function(e,i,n,t,r){l._addOrder(t,i,e,n,r)}},arguments,this)},_addOrder:function(e,t,i,n,r){var l=this,d=Breinify.UTL.internal.cbCollector({_callback:function(e,i){if(null===e)l._addOrderValidated(i.entity,t,i.externalIds,i.location,r);else for(var n in e)if(e.hasOwnProperty(n)){n=e[n];r(n);break}},location:function(e,i){d._set("location",e,i)},entity:function(e,i){d._set("entity",e,i)},externalIds:function(e,i){d._set("externalIds",e,i)}});this._validateLocation(n,d.location),this._validateEntity(e,d.entity),this._validateExternalIds(i,d.externalIds)},_validateExternalIds:function(e,i){if(null==e)i(null,null);else if(d.isArray(e)){for(var n=0;n<e.length;n++)if("string"!=typeof e[n])return void i(new Error(o+"ExternalIds "+e[n]+" must be a string."));i(null,e)}else"string"==typeof e&&""!==e.trim()&&i(null,[e])},_validateLocation:function(e,i){var n,t;null==e?i(null,null):d.isPlainObject(e)?(n=!Breinify.UTL.isEmpty(e.id),t=!Breinify.UTL.isEmpty(e.name),n||t?(n?t||(e.name=null):e.id=null,i(null,e)):i(new Error(o+"Must specify a location's id or name."))):i(new Error(o+"Location must be a plain-object."))},_validateEntity:function(e,i){if(null==e)i(null,null);else if(d.isPlainObject(e)){if(null==e.type)e.type="sms";else{if("string"!=typeof e.type)return void i(new Error(o+"EntityType must be a string (or empty)."));if("sms"!==e.type)return void i(new Error(o+"EntityType "+e.type+" not supported."))}if(null==e.name)e.name=null;else if("string"!=typeof e.name)return void i(new Error(o+"EntityName must be a string (or empty)."));if(null==e.id)e.id=null;else if("string"!=typeof e.id)return void i(new Error(o+"EntityId must be a string (or empty)."));if(null!==e.id)if("sms"===e.type){if("string"!=typeof e.id)return void i(new Error(o+"Invalid phone-number (entityId) defined: "+e.id));if(e.id=e.id.trim(),!/\+?\d+/.test(e.id))return void i(new Error(o+"Invalid phone-number (entityId) defined: "+e.id));if(0!==e.id.indexOf("+"))return void i(new Error(o+"Phone-number (entityId) must include the country-code (e.g., +1): "+e.id))}else i(new Error(o+"EntityType "+entityType+" not supported."));i(null,e)}else i(new Error(o+"Entity must be a plain-object."))},_addOrderValidated:function(e,i,n,t,r){var l;null===n?r(new Error(o+"The pick-up's identifier(s) must be set.")):null===t?r(new Error(o+"The pick-up's location must be set.")):d.isPlainObject(e)&&null!==e.id&&null===e.type?r(new Error(o+"The pick-up's entity-type must be set (if the id is specified).")):(i=Breinify.UTL.user.create(i),l={pickUpMessage:"addPickUp",pickUpExternalIds:n,pickUpLocation:t.name,pickUpLocationId:t.id,pickUpEntities:[{pickUpEntityId:e.id,pickUpEntityType:e.type,pickUpEntityName:e.name}]},n={messageServiceUserIdentifier:null===e.id?"UNIDENTIFIED":e.id,gameKeyword:"pickup",gameInputText:JSON.stringify(l),messageText:"ADD PICKUP "+n[0]+" FOR "+e.id+" AT "+t.name},Breinify.activity(i,"gameSms",null,null,n,function(e,i){"string"==typeof i?r(new Error(a+i)):r(null,l)}))}}))})();