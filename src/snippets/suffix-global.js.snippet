
} catch (e) {

    /*
     * If we have a console write the error.
     */
    if (typeof console === 'object' && typeof console.error === 'function') {
        console.error('Error detected while loading Breinify', e);
    }

    /*
     * We just create a simple wrapper, which makes sure every code works.
     */
    var Breinify = {};

    // things that shouldn't be used anyways (not documented)
    Breinify.BreinifyConfig = function() {};
    Breinify.BreinifyUser = function() {};
    Breinify.AttributeCollection = function() {};

    // now all the stuff to ensure save usage
    Breinify.version = 'FALLBACK';
    Breinify.jQueryVersion = 'FALLBACK';
    Breinify.setConfig = function () {};
    Breinify.config = function () { return {} };
    Breinify.onReady = function () {};
    Breinify.activityUser = function (user, type, category, description, sign, onReady) {
        if (typeof onReady === 'function') {
            onReady();
        }
    };
    Breinify.activity = function (user, type, category, description, sign, onReady) {
        if (typeof onReady === 'function') {
            onReady();
        }
    };
    Breinify.lookupUser = function (user, dimensions, sign, onReady) {
        if (typeof onReady === 'function') {
            onReady();
        }
    };
    Breinify.lookup = function (user, dimensions, sign, onLookUp) {
        if (typeof onLookUp === 'function') {
            onLookUp();
        }
    };
    Breinify.temporalDataUser = function (user, timezone, localDateTime, sign, onReady) {
         if (typeof onReady === 'function') {
            onReady();
         }
    }
    Breinify.temporalData = function (user, timezone, localDateTime, sign, onReady) {
         if (typeof onReady === 'function') {
            onReady();
         }
    };
    Breinify.recommendation = function (user, nr, sign, onReady) {
        if (typeof onReady === 'function') {
            onReady();
        }
    };
    Breinify.recommendationUser = function (user, nr, sign, onReady) {
        if (typeof onReady === 'function') {
            onReady();
        }
    };
    Breinify.handleError = function(e, scriptSourceRegEx) {};
    Breinify.UTL = {
        constants: {
            errors: {
                prefix: {
                    validation: '[VALIDATION] ',
                    api: '[API] '
                }
            }
        },
        dom: {
            addModification: function() {},
            removeModification: function() {},
            addClassChangeObserver: function() {}
        },
        google: {
            addDataLayerEventListener: function() { return; }
        },
        loc: {
            createGetParameter: function() { return null; },
            parseGetParameter: function() { return null; },
            params: function () { return []; },
            hasParam: function() { return false; },
            isParam: function() { return false; },
            paramIs: function() { return false; },
            parsedParam: function() { return null; },
            param: function() { return null; },
            url: function() { return window.location.href; },
            extract: function() { return {}; },
            matches: function() { return false; }
        },
        cookie: {
            cookieDomain: null,
            all: function () { return []; },
            setJson: function() {},
            getJson: function() { return null; },
            set: function() {},
            reset: function() {},
            get: function() { return null; },
            check: function() { return false; },
            domain: function () { return null; }
        },
        cookies: {
            sessionId: 'x-breinify-uuid',
            browserId: 'x-breinify-bid',
            delayedActivities: 'x-breinify-delayed'
        },
        user: {
            sessionId: null,
            browserId: null,
            create: function() { return {}; },
            getBrowserId: function() { return null; },
            getSessionId: function() { return null; },
            getMarkerSessionId: function() { return null; },
            resetSessionId: function() { return null; }
        },
        events: {
            observerInterval: null,
            observables: {},
            click: function() {},
            pageloaded: function() {},
            observeDomChange: function() { return null; },
            removeAllDomObserver: function() {},
            removeDomObserver: function() {}
        },
        internal: {
            isDevMode: function() { return false; },
            cbCollector: function(collection) { return collection; },
            runExternaljQuery: function(plugin, func) { return false; },
            token: function(apiToken, payload, cb, timeout) { cb(new Error('Breinify not available.')) }
        },
        select: function() { return null; },
        texts: function() { return []; },
        text: function() { return null; },
        unixTimestamp: function () {
            return Math.floor(new Date().getTime() / 1000);
        },
        trimQuotes: function(str) { return str; },
        setText: function() {},
        md5: function () { return null; },
        isEmpty: function() { return false; },
        ensureSimpleObject: function() { return {}; },
        isSimpleObject: function() { return false; },
        timezone: function() { return null; },
        localDateTime: function() { return new Date().toString(); },
        localString: function(date) { return date.toLocaleString(); },
        uuid: function() { return null; },
        getNestedByPath: function() { return null; },
        getNested: function() { return null; },
        deleteNullProperties: function(data) { return data; },
        endsWith: function() { return false; },
        bindjQueryPlugins: function() {},
        capitalize: function(str) {return str; },
        lowerize: function(str) { return str; },
        firstLetter: function(str, lowerCase) { return str; },
        toNumber: function(str) { return NaN; },
        isNonEmptyString: function(str) { return null; },
        equals: function(o1, o2) { return o1 === o2; },
        toPrice: function(str) { return null; },
        formatPrice: function(str) { return null; },
        toInteger: function(str) { return null; },
        extend: function(str) { return {}; },
        _jquery: function() { return null; }
    };

    // no additional plugins available
    Breinify.plugins = {
        _overload: function() { return { overload: function() {} } },
        _add: function() {}
    };

    window['Breinify'] = Breinify;
}

}(window));